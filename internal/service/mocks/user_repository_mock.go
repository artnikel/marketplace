// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/artnikel/marketplace/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) Create(ctx context.Context, login string, hash string) (*models.User, error) {
	ret := _mock.Called(ctx, login, hash)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*models.User, error)); ok {
		return returnFunc(ctx, login, hash)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *models.User); ok {
		r0 = returnFunc(ctx, login, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, login, hash)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - login
//   - hash
func (_e *MockUserRepository_Expecter) Create(ctx interface{}, login interface{}, hash interface{}) *MockUserRepository_Create_Call {
	return &MockUserRepository_Create_Call{Call: _e.mock.On("Create", ctx, login, hash)}
}

func (_c *MockUserRepository_Create_Call) Run(run func(ctx context.Context, login string, hash string)) *MockUserRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserRepository_Create_Call) Return(user *models.User, err error) *MockUserRepository_Create_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_Create_Call) RunAndReturn(run func(ctx context.Context, login string, hash string) (*models.User, error)) *MockUserRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByLogin provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetByLogin(ctx context.Context, login string) (*models.User, error) {
	ret := _mock.Called(ctx, login)

	if len(ret) == 0 {
		panic("no return value specified for GetByLogin")
	}

	var r0 *models.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return returnFunc(ctx, login)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = returnFunc(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, login)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetByLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByLogin'
type MockUserRepository_GetByLogin_Call struct {
	*mock.Call
}

// GetByLogin is a helper method to define mock.On call
//   - ctx
//   - login
func (_e *MockUserRepository_Expecter) GetByLogin(ctx interface{}, login interface{}) *MockUserRepository_GetByLogin_Call {
	return &MockUserRepository_GetByLogin_Call{Call: _e.mock.On("GetByLogin", ctx, login)}
}

func (_c *MockUserRepository_GetByLogin_Call) Run(run func(ctx context.Context, login string)) *MockUserRepository_GetByLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepository_GetByLogin_Call) Return(user *models.User, err error) *MockUserRepository_GetByLogin_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_GetByLogin_Call) RunAndReturn(run func(ctx context.Context, login string) (*models.User, error)) *MockUserRepository_GetByLogin_Call {
	_c.Call.Return(run)
	return _c
}
