// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/artnikel/marketplace/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockItemRepository creates a new instance of MockItemRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockItemRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockItemRepository {
	mock := &MockItemRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockItemRepository is an autogenerated mock type for the ItemRepository type
type MockItemRepository struct {
	mock.Mock
}

type MockItemRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockItemRepository) EXPECT() *MockItemRepository_Expecter {
	return &MockItemRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockItemRepository
func (_mock *MockItemRepository) Create(ctx context.Context, item *models.Item) error {
	ret := _mock.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.Item) error); ok {
		r0 = returnFunc(ctx, item)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockItemRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockItemRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - item
func (_e *MockItemRepository_Expecter) Create(ctx interface{}, item interface{}) *MockItemRepository_Create_Call {
	return &MockItemRepository_Create_Call{Call: _e.mock.On("Create", ctx, item)}
}

func (_c *MockItemRepository_Create_Call) Run(run func(ctx context.Context, item *models.Item)) *MockItemRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Item))
	})
	return _c
}

func (_c *MockItemRepository_Create_Call) Return(err error) *MockItemRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockItemRepository_Create_Call) RunAndReturn(run func(ctx context.Context, item *models.Item) error) *MockItemRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockItemRepository
func (_mock *MockItemRepository) List(ctx context.Context, offset int, limit int, filters *models.ItemFilters) ([]*models.Item, error) {
	ret := _mock.Called(ctx, offset, limit, filters)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*models.Item
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, *models.ItemFilters) ([]*models.Item, error)); ok {
		return returnFunc(ctx, offset, limit, filters)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, *models.ItemFilters) []*models.Item); ok {
		r0 = returnFunc(ctx, offset, limit, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Item)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int, *models.ItemFilters) error); ok {
		r1 = returnFunc(ctx, offset, limit, filters)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockItemRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockItemRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx
//   - offset
//   - limit
//   - filters
func (_e *MockItemRepository_Expecter) List(ctx interface{}, offset interface{}, limit interface{}, filters interface{}) *MockItemRepository_List_Call {
	return &MockItemRepository_List_Call{Call: _e.mock.On("List", ctx, offset, limit, filters)}
}

func (_c *MockItemRepository_List_Call) Run(run func(ctx context.Context, offset int, limit int, filters *models.ItemFilters)) *MockItemRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(*models.ItemFilters))
	})
	return _c
}

func (_c *MockItemRepository_List_Call) Return(items []*models.Item, err error) *MockItemRepository_List_Call {
	_c.Call.Return(items, err)
	return _c
}

func (_c *MockItemRepository_List_Call) RunAndReturn(run func(ctx context.Context, offset int, limit int, filters *models.ItemFilters) ([]*models.Item, error)) *MockItemRepository_List_Call {
	_c.Call.Return(run)
	return _c
}
