// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/artnikel/marketplace/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockItemsService creates a new instance of MockItemsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockItemsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockItemsService {
	mock := &MockItemsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockItemsService is an autogenerated mock type for the ItemsService type
type MockItemsService struct {
	mock.Mock
}

type MockItemsService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockItemsService) EXPECT() *MockItemsService_Expecter {
	return &MockItemsService_Expecter{mock: &_m.Mock}
}

// CreateItem provides a mock function for the type MockItemsService
func (_mock *MockItemsService) CreateItem(ctx context.Context, input *models.Item) (*models.Item, error) {
	ret := _mock.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateItem")
	}

	var r0 *models.Item
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.Item) (*models.Item, error)); ok {
		return returnFunc(ctx, input)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.Item) *models.Item); ok {
		r0 = returnFunc(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Item)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *models.Item) error); ok {
		r1 = returnFunc(ctx, input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockItemsService_CreateItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateItem'
type MockItemsService_CreateItem_Call struct {
	*mock.Call
}

// CreateItem is a helper method to define mock.On call
//   - ctx
//   - input
func (_e *MockItemsService_Expecter) CreateItem(ctx interface{}, input interface{}) *MockItemsService_CreateItem_Call {
	return &MockItemsService_CreateItem_Call{Call: _e.mock.On("CreateItem", ctx, input)}
}

func (_c *MockItemsService_CreateItem_Call) Run(run func(ctx context.Context, input *models.Item)) *MockItemsService_CreateItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Item))
	})
	return _c
}

func (_c *MockItemsService_CreateItem_Call) Return(item *models.Item, err error) *MockItemsService_CreateItem_Call {
	_c.Call.Return(item, err)
	return _c
}

func (_c *MockItemsService_CreateItem_Call) RunAndReturn(run func(ctx context.Context, input *models.Item) (*models.Item, error)) *MockItemsService_CreateItem_Call {
	_c.Call.Return(run)
	return _c
}

// ListItems provides a mock function for the type MockItemsService
func (_mock *MockItemsService) ListItems(ctx context.Context, page int, limit int, filters *models.ItemFilters) ([]*models.Item, error) {
	ret := _mock.Called(ctx, page, limit, filters)

	if len(ret) == 0 {
		panic("no return value specified for ListItems")
	}

	var r0 []*models.Item
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, *models.ItemFilters) ([]*models.Item, error)); ok {
		return returnFunc(ctx, page, limit, filters)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, *models.ItemFilters) []*models.Item); ok {
		r0 = returnFunc(ctx, page, limit, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Item)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int, *models.ItemFilters) error); ok {
		r1 = returnFunc(ctx, page, limit, filters)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockItemsService_ListItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListItems'
type MockItemsService_ListItems_Call struct {
	*mock.Call
}

// ListItems is a helper method to define mock.On call
//   - ctx
//   - page
//   - limit
//   - filters
func (_e *MockItemsService_Expecter) ListItems(ctx interface{}, page interface{}, limit interface{}, filters interface{}) *MockItemsService_ListItems_Call {
	return &MockItemsService_ListItems_Call{Call: _e.mock.On("ListItems", ctx, page, limit, filters)}
}

func (_c *MockItemsService_ListItems_Call) Run(run func(ctx context.Context, page int, limit int, filters *models.ItemFilters)) *MockItemsService_ListItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(*models.ItemFilters))
	})
	return _c
}

func (_c *MockItemsService_ListItems_Call) Return(items []*models.Item, err error) *MockItemsService_ListItems_Call {
	_c.Call.Return(items, err)
	return _c
}

func (_c *MockItemsService_ListItems_Call) RunAndReturn(run func(ctx context.Context, page int, limit int, filters *models.ItemFilters) ([]*models.Item, error)) *MockItemsService_ListItems_Call {
	_c.Call.Return(run)
	return _c
}
